<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>俊先森123</title>
  
  <subtitle>做嵌入式软件的搬砖人</subtitle>
  <link href="https://junxiansen.cn/atom.xml" rel="self"/>
  
  <link href="https://junxiansen.cn/"/>
  <updated>2023-03-31T05:54:11.721Z</updated>
  <id>https://junxiansen.cn/</id>
  
  <author>
    <name>张文俊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://junxiansen.cn/hello-world.html"/>
    <id>https://junxiansen.cn/hello-world.html</id>
    <published>2099-09-09T01:09:09.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Academia"><a href="#Academia" class="headerlink" title="Academia"></a>Academia</h3><p>本页之所以会作为 <code>Academia</code> 主题首页内容，是因为 <code>Front-Matter</code> 中添加了主题所要求的 <code>academia: true</code> 标识，该主题设置使用方法敬请查看 <code>Academia</code> 主题对应文档，或者参考 <a href="/academia-example.html" title="仅为参考，请以主题文档及学术简历规范为准">此示例</a> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="Example" scheme="https://junxiansen.cn/tags/Example/"/>
    
  </entry>
  
  <entry>
    <title>3-时钟节拍</title>
    <link href="https://junxiansen.cn/3-%E6%97%B6%E9%92%9F%E8%8A%82%E6%8B%8D.html"/>
    <id>https://junxiansen.cn/3-%E6%97%B6%E9%92%9F%E8%8A%82%E6%8B%8D.html</id>
    <published>2022-08-28T15:04:31.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    
    
    
    <category term="uCOS-III" scheme="https://junxiansen.cn/categories/uCOS-III/"/>
    
    
    <category term="时钟节拍" scheme="https://junxiansen.cn/tags/%E6%97%B6%E9%92%9F%E8%8A%82%E6%8B%8D/"/>
    
  </entry>
  
  <entry>
    <title>2-创建LED灯任务</title>
    <link href="https://junxiansen.cn/2-%E5%88%9B%E5%BB%BALED%E7%81%AF%E4%BB%BB%E5%8A%A1.html"/>
    <id>https://junxiansen.cn/2-%E5%88%9B%E5%BB%BALED%E7%81%AF%E4%BB%BB%E5%8A%A1.html</id>
    <published>2022-08-28T13:07:16.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建LED灯的任务"><a href="#创建LED灯的任务" class="headerlink" title="创建LED灯的任务"></a>创建LED灯的任务</h2><p>首先要了解创建任务函数代码OSTaskCreate(),其函数在ucos-iii的api手册中有描述。该描述说通过提供的参数指定任务将如何被管理。任务始终在准备运行状态下创建，也就是OS_Init()函数之后。</p><p><img src="/../images/2-%E5%88%9B%E5%BB%BALED%E7%81%AF%E4%BB%BB%E5%8A%A1/UCOS%E7%9A%84API%E6%89%8B%E5%86%8C.jpg" alt="UCOS的API手册"></p><p><img src="/../images/2-%E5%88%9B%E5%BB%BALED%E7%81%AF%E4%BB%BB%E5%8A%A1/OSTaskCreat%E5%87%BD%E6%95%B0.jpg" alt="OSTaskCreat函数"></p><p>OS_TCB  *p_tcb是结构体类型的指针，存储任务的配置信息，定义为全局变量。</p><p>CPU_CHAR  *p_name是一个ASCII码的字符串指针，给任务分配一个名字，用来调试时显示。</p><p>OS_TASK_PTR  p_task是一个任务的指针，填写任务的函数名。其实任务作为一个死循环，任务就是一个函数。</p><p>void  *p_arg是传递任务参数</p><p>OS_PRIO  prio是任务的优先级，数值越低任务优先级越高，但是优先级0和优先级1，优先级62和优先级63是保留的需要将优先级设置从2开始。</p><p>CPU_STK *p_stk_base任务栈空间基地址的指针，任务的栈用来存储局部的变量，函数的参数，返回地址，以及中断过程中保存cpu寄存器的信息。</p><p>CPU_STK_SIZE  stk_limit是任务堆栈的限制，监视确保任务的堆栈没有溢出。</p><p>CPU_STK_SIZE  stk_size是当前任务栈空间的大小。</p><p>OS_MSG_QTY  q_size是任务内部消息队列。如果参数设置为0，用户无法收到消息。</p><p>OS_TICK  time_quanta时间片轮转的时间，如果是0将使用默认的时间片。</p><p>void *p_ext是任务控制块的扩展信息，绝大部分该参数并不会使用到。</p><p>OS_OPT opt是任务相关的选项。</p><p>OS_ERR *p_err用来存放错误代码的指针。</p><ul><li><p>创建一个My_FirstTask任务代码可以写成：</p><p>需要定义全局变量任务控制块的大小OS_TCB My_TaskTcb; 任务堆栈的大小CPU_STK My_FirstTaskSTK[128];</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CreateTask</span></span><br><span class="line">OSTaskCreate  ((OS_TCB     *)&amp;My_TaskTcb,</span><br><span class="line">             (CPU_CHAR   *)<span class="string">&quot;My first task&quot;</span>,</span><br><span class="line">             (OS_TASK_PTR)My_FirstTask,</span><br><span class="line">             (<span class="type">void</span>       *)<span class="number">0</span>,</span><br><span class="line">             (OS_PRIO     )<span class="number">2</span>,</span><br><span class="line">             (CPU_STK    *)&amp;My_FirstTaskSTK[<span class="number">0</span>],</span><br><span class="line">             (CPU_STK_SIZE)<span class="number">12</span>,</span><br><span class="line">             (CPU_STK_SIZE)<span class="number">128</span>,</span><br><span class="line">             (OS_MSG_QTY  )<span class="number">0u</span>,</span><br><span class="line">             (OS_TICK     )<span class="number">0u</span>,</span><br><span class="line">             (<span class="type">void</span>       *)<span class="number">0</span>,</span><br><span class="line">             (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),</span><br><span class="line">             (OS_ERR     *)&amp;err);</span><br></pre></td></tr></table></figure><p>此时需要定义My_FirstTask任务，一个任务的基本结构代码：(void)p_arg;防止编译器报警，因为定义的形参p_arg没有使用到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">My_FirstTask</span><span class="params">(<span class="type">void</span> *p_arg)</span></span><br><span class="line">&#123;</span><br><span class="line">(<span class="type">void</span>)p_arg;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面开始主题，创建LED任务，点亮两个led灯。</li></ul><p>首先初始化Led的GPIO引脚，这里就不过多描述了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Led_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main.c中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;includes.h&quot;</span><br><span class="line">#include &quot;led.h&quot;</span><br><span class="line">OS_TCB LedTask_TCB;</span><br><span class="line">CPU_STK LedTask_Stk[128];</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">OS_ERR err;</span><br><span class="line">Led_Config();</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  /* 初始化&quot;uC/OS-III&quot;内核 */  </span><br><span class="line">OSInit(&amp;err);       </span><br><span class="line"></span><br><span class="line">//CreateTask</span><br><span class="line">OSTaskCreate((OS_TCB     *)&amp;LedTask_TCB,</span><br><span class="line">(CPU_CHAR   *)&quot;Led_Task&quot;,</span><br><span class="line">(OS_TASK_PTR)Led_Task,</span><br><span class="line">(void       *)0,</span><br><span class="line">(OS_PRIO     )2,</span><br><span class="line">(CPU_STK    *)&amp;LedTask_Stk[0],</span><br><span class="line">(CPU_STK_SIZE)12,</span><br><span class="line">          (CPU_STK_SIZE)128,</span><br><span class="line">          (OS_MSG_QTY  )0u,</span><br><span class="line">          (OS_TICK     )0u,</span><br><span class="line">          (void       *)0,</span><br><span class="line">          (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),</span><br><span class="line">          (OS_ERR     *)&amp;err);</span><br><span class="line"></span><br><span class="line">  /* 启动多任务系统，控制权交给uC/OS-III */</span><br><span class="line">  OSStart(&amp;err);                                       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Led_Task函数中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Led_Task(void *p_arg)</span><br><span class="line">&#123;</span><br><span class="line">(void)p_arg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">Led1_ON;</span><br><span class="line">Led2_ON;</span><br><span class="line">Delay(10000000);</span><br><span class="line">Led1_OFF;</span><br><span class="line">Led2_OFF;</span><br><span class="line">Delay(10000000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/2-%E5%88%9B%E5%BB%BALED%E7%81%AF%E4%BB%BB%E5%8A%A1/%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.jpg" alt="实验结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建LED灯的任务&quot;&gt;&lt;a href=&quot;#创建LED灯的任务&quot; class=&quot;headerlink&quot; title=&quot;创建LED灯的任务&quot;&gt;&lt;/a&gt;创建LED灯的任务&lt;/h2&gt;&lt;p&gt;首先要了解创建任务函数代码OSTaskCreate(),其函数在ucos-iii的a</summary>
      
    
    
    
    <category term="uCOS-III" scheme="https://junxiansen.cn/categories/uCOS-III/"/>
    
    
    <category term="创建任务" scheme="https://junxiansen.cn/tags/%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>1-2栈的应用_逆波兰表示法</title>
    <link href="https://junxiansen.cn/1-2%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95.html"/>
    <id>https://junxiansen.cn/1-2%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95.html</id>
    <published>2022-08-26T07:29:29.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1栈的应用，逆波兰算法-后缀算法"><a href="#1栈的应用，逆波兰算法-后缀算法" class="headerlink" title="1栈的应用，逆波兰算法(后缀算法)"></a>1栈的应用，逆波兰算法(后缀算法)</h2><p>1、逆波兰表示法：为什么要将看似简单的中序表达式转换为复杂的逆波兰式？原因就在于这个简单是相对人类的思维结构来说的，对计算机而言中序表达式是非常复杂的结构。相对的，逆波兰式在计算机看来却是比较简单易懂的结构。因为计算机普遍采用的内存结构是栈式结构</p><p>本次逆波兰表示法只考虑个位数，不考虑十位数的。运算只考虑加减乘，不考虑除法和取余。</p><p>中缀表示法(1+2)*(3-4)</p><p>逆波兰表示法12+34-*</p><p>其思想就是操作运算符放在后面</p><p>第一步(1+2)(3-4)*</p><p>第二步12+34-*</p><p>再比如5x（（（9+8）x（4x6））+7）</p><p>第一步5（（（9+8）x（4x6））+7）x</p><p>第二步5（（9+8）x（4x6））7+x</p><p>第三步5（9+8）（4x6）x7+x</p><p>第四步598+46xx7+x</p><p>其思想就是数字按顺序入栈，遇到运算符出栈。然后将出栈的数字进行运算，运算结果存入栈里。</p><p>12+34-*图解为，最后结果为-3与中缀表示法得数相同</p><p><img src="/../images/1-2%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95/%E8%BF%90%E7%AE%97%E7%BB%93%E6%9E%9C1.jpg" alt="运算结果1"></p><p>598+46xx7+x，结果为2075</p><p><img src="/../images/1-2%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95/%E8%BF%90%E7%AE%97%E7%BB%93%E6%9E%9C2.jpg" alt="运算结果2"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="built_in">stack</span>[<span class="number">518</span>];</span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> c)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">is_Empty</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line">gets(a);</span><br><span class="line">n = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&amp;&amp;(a[i]&gt;=<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">push(a[i]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//字符串转换成整型。字符转化为数字的时候经常要用到，比如要将‘8’转换为数字8，在语句中这样写就可以了，“ 8+‘0’ ”</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n1 = pop();</span><br><span class="line"><span class="type">int</span> n2 = pop();</span><br><span class="line"><span class="keyword">switch</span>(a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">push(n2+n1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">push(n2-n1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">push(n2*n1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pop());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[top++] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">pop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>[--top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检测栈是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_Empty</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：如何将中位表达式转化成逆波兰表达式？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1栈的应用，逆波兰算法-后缀算法&quot;&gt;&lt;a href=&quot;#1栈的应用，逆波兰算法-后缀算法&quot; class=&quot;headerlink&quot; title=&quot;1栈的应用，逆波兰算法(后缀算法)&quot;&gt;&lt;/a&gt;1栈的应用，逆波兰算法(后缀算法)&lt;/h2&gt;&lt;p&gt;1、逆波兰表示法：为什么</summary>
      
    
    
    
    <category term="数据结构" scheme="https://junxiansen.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈" scheme="https://junxiansen.cn/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>1-1栈实现原理</title>
    <link href="https://junxiansen.cn/1-1%E6%A0%88%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"/>
    <id>https://junxiansen.cn/1-1%E6%A0%88%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html</id>
    <published>2022-08-26T07:28:42.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈实现原理"><a href="#栈实现原理" class="headerlink" title="栈实现原理"></a>栈实现原理</h2><ul><li><p>数组+循环 就可以实现栈和队列</p></li><li><p>什么是栈？FILO （First Input Last Out）</p></li></ul><p>例如子弹装到弹夹里，最先放到的子弹，最后射出。同样的最后放的子弹，最先射出。</p><p><img src="/../images/1-1%E6%A0%88%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/%E5%87%BA%E5%85%A5%E6%A0%88%E6%93%8D%E4%BD%9C.jpg" alt="出入栈操作"></p><ul><li><p>栈里面的内容可以是任意数据类型，数组可以是整型，浮点型，字符型，结构体数组。</p></li><li><p>存储数据叫入栈，取出数据叫出栈。</p></li><li><p>栈和数组的区别：数组可以访问任何元素，栈只能每次访问栈的最顶端。</p></li><li><p>栈的操作有：入栈，出栈，判断栈是否为空</p></li><li><p>栈需要指针来操作，指针永远指向栈顶空白的空间，出栈操作，指针向下挪一个位置</p></li></ul><p>栈顶指针其实是数组空的元素编号。</p><ul><li>入栈，出栈，检测栈是否为空代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="built_in">stack</span>[<span class="number">518</span>];</span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">char</span> c)</span>;</span><br><span class="line"><span class="type">char</span> <span class="title function_">pop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">is_Empty</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">push(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">push(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">push(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(!is_Empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[top++] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>  <span class="title function_">pop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>[--top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_Empty</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;栈实现原理&quot;&gt;&lt;a href=&quot;#栈实现原理&quot; class=&quot;headerlink&quot; title=&quot;栈实现原理&quot;&gt;&lt;/a&gt;栈实现原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组+循环 就可以实现栈和队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是栈？FILO （First</summary>
      
    
    
    
    <category term="数据结构" scheme="https://junxiansen.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈的原理" scheme="https://junxiansen.cn/tags/%E6%A0%88%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数据结构背景</title>
    <link href="https://junxiansen.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%83%8C%E6%99%AF.html"/>
    <id>https://junxiansen.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%83%8C%E6%99%AF.html</id>
    <published>2022-08-26T07:27:48.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构+算法 &#x3D; 程序</p><p>算法是计算机处理问题的步骤，步骤一定是代码可实现的，</p><p>数据结构：作为处理对象数据的排列方式，</p><p>实际上真正提高编程水平，算法为内功（数学是基础思想）</p><p>数据结构是算法的基础，所以要先学习数据结构，</p><p>数据才是程序中心，找到数据最佳的组织方式，算法才能事半功倍。</p><p>数据结构就是组织数据最有效的排列方式</p><p>算法决定程序的优劣，在解决同一个问题时，用不同算法（思想）得出结果千差万别。</p><p>在数据规模庞大时候，算法决定程序的生死，例如排序问题，有100w个数，用冒泡和快速算法，冒泡要很久，快速相对好一点。算法选的不好没有实际意义。</p><p>算法关键在于思想和设计巧妙，语法规则不重要</p><p>一个高级程序员工程师具备：数据机构+算法+数学思想+流程思想+逻辑思想</p><p>数据结构：</p><p>1、基础数据结构</p><p>2、图</p><p>3、排序</p><p>4、查找</p><p>5、高级数据结构</p><p>算法：</p><p>贪心算法、分制法、动态规划、回溯法。</p><p>做例题and面试题，刷Leetcode</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据结构+算法 &amp;#x3D; 程序&lt;/p&gt;
&lt;p&gt;算法是计算机处理问题的步骤，步骤一定是代码可实现的，&lt;/p&gt;
&lt;p&gt;数据结构：作为处理对象数据的排列方式，&lt;/p&gt;
&lt;p&gt;实际上真正提高编程水平，算法为内功（数学是基础思想）&lt;/p&gt;
&lt;p&gt;数据结构是算法的基础，所以要先学习</summary>
      
    
    
    
    <category term="数据结构" scheme="https://junxiansen.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="背景" scheme="https://junxiansen.cn/tags/%E8%83%8C%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>1-uCOS-III的使用与基本配置</title>
    <link href="https://junxiansen.cn/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.html"/>
    <id>https://junxiansen.cn/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.html</id>
    <published>2022-08-24T03:31:27.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="uCOS-III的基本配置与使用"><a href="#uCOS-III的基本配置与使用" class="headerlink" title="uCOS-III的基本配置与使用"></a>uCOS-III的基本配置与使用</h2><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.jpg" alt="工程目录"></p><p>uC_Source目录下是uCOSIII的&#x3D;&#x3D;源代码&#x3D;&#x3D;，此列表下的文件与任何CPU都无关，若移植其他芯片时该文件中的源码不需要更改。调用api时基本使用的是该目录下的文件。</p><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/uC_Source%E7%9B%AE%E5%BD%95.jpg" alt="uC_Source目录"></p><p>uC_Cfg 目录包含整个工程的&#x3D;&#x3D;配置文件&#x3D;&#x3D;，配置系统功能的使能，系统运行的状况，环境配置选项有关的。</p><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/uC_Cfg%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.jpg" alt="uC_Cfg文件目录"></p><p>uC_Lib库目录包含有常见的ascii码，数学math，内存mem，字符串str源代码，在使用的过程中有&#x3D;&#x3D;数据的处理，运算等&#x3D;&#x3D;。</p><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/uC_Lib%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6.jpg" alt="uC_Lib目录文件"></p><p>uC_Ports接口目录，该目录下的文件与&#x3D;&#x3D;移植系统&#x3D;&#x3D;有关，不同的处理器，把一些硬件的特性和语言控制的接口与uCOS-III结合起来。</p><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/uC_Port%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6.jpg" alt="uC_Port目录文件"></p><p>uC_CPU目录包含&#x3D;&#x3D;cpu&#x3D;&#x3D;相关的代码，因为不同处理器使用cpu不同，移植的时候也会修改部分代码。</p><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/uC_Cpu%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6.jpg" alt="uC_Cpu目录文件"></p><p>uCOS应该如何使用，在main函数中一定有这3步，第一步使用&#x3D;&#x3D;OSInit（）&#x3D;&#x3D;来初始化uCOS系统的内核，第二步&#x3D;&#x3D;创建任务&#x3D;&#x3D;，第三步使用&#x3D;&#x3D;OSStart（）&#x3D;&#x3D;来启动操作系统</p><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/uCOS%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8.jpg" alt="uCOS如何使用"></p><p>OSInit（）函数中有两个任务是一定被创建中的一个是空闲任务&#x3D;&#x3D;OS_IdleTask()&#x3D;&#x3D;，另一个是时钟基准的任务&#x3D;&#x3D;OS_TickTask()&#x3D;&#x3D;。有三个任务是根据条件创建的，要打开对应的宏，软件定时器任务OS_TmrTask()，中断队列任务OS_IntQTask()，统计信息任务OS_StatTask()。</p><p>uCOS任务一共有5种状态，&#x3D;&#x3D;休眠态，就绪态，运行态，等待态，中断服务态&#x3D;&#x3D;，任何任务都是这5种状态之一。</p><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/uCOS-III%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81.jpg" alt="uCOS-III任务状态"></p><p>通过&#x3D;&#x3D;调用特定的函数，任务的状态可以相互转换&#x3D;&#x3D;。</p><p><img src="/../images/1-uCOS-III%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/uCOS-III%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2.jpg" alt="uCOS-III任务状态切换"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;uCOS-III的基本配置与使用&quot;&gt;&lt;a href=&quot;#uCOS-III的基本配置与使用&quot; class=&quot;headerlink&quot; title=&quot;uCOS-III的基本配置与使用&quot;&gt;&lt;/a&gt;uCOS-III的基本配置与使用&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../</summary>
      
    
    
    
    <category term="uCOS-III" scheme="https://junxiansen.cn/categories/uCOS-III/"/>
    
    
    <category term="uCOS" scheme="https://junxiansen.cn/tags/uCOS/"/>
    
  </entry>
  
  <entry>
    <title>Windows字符集</title>
    <link href="https://junxiansen.cn/Windows%E5%AD%97%E7%AC%A6%E9%9B%86.html"/>
    <id>https://junxiansen.cn/Windows%E5%AD%97%E7%AC%A6%E9%9B%86.html</id>
    <published>2022-08-23T08:10:46.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<p>Windows字符集</p><p>老外使用多字节，1个字符对应1个字节。</p><p>中文使用宽字节，Unicode（宽字节）,1个字符对应多个字节。例如utf-8，1个字符对应3个字节。GBK1个字符对应2个字节。</p><ul><li>多字节转为宽字节，前面加L</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MessageBox</span>(<span class="string">L&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>使用TEXT，可以自适应编码转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;aaa&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>统计多字节字符串长度</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">strlen</span>(p);</span><br></pre></td></tr></table></figure><ul><li>统计宽字节字符串长度</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> len =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">wchar_t</span> *p = <span class="string">L&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">len = <span class="built_in">wcslen</span>(p);</span><br></pre></td></tr></table></figure><ul><li>char * 与 CString 之间转换<br>– char *转CString</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * p =<span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line">CString str = <span class="built_in">CString</span>(p);</span><br></pre></td></tr></table></figure><p>​       – CString 转 char *</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CString str;</span><br><span class="line"></span><br><span class="line">CStringA tmp;</span><br><span class="line"></span><br><span class="line">tmp = str;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * p =tmp.<span class="built_in">GetBuffer</span>();</span><br></pre></td></tr></table></figure><ul><li>若使用C++的string转成MFC的CString，需要中间桥梁char *p，先将string转成char *p再转CString，或者CString 转成 char * p再转string。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows字符集&lt;/p&gt;
&lt;p&gt;老外使用多字节，1个字符对应1个字节。&lt;/p&gt;
&lt;p&gt;中文使用宽字节，Unicode（宽字节）,1个字符对应多个字节。例如utf-8，1个字符对应3个字节。GBK1个字符对应2个字节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多字节转为宽字节，前面加L</summary>
      
    
    
    
    <category term="QT和MFC" scheme="https://junxiansen.cn/categories/QT%E5%92%8CMFC/"/>
    
    
    <category term="MFC" scheme="https://junxiansen.cn/tags/MFC/"/>
    
    <category term="字符集" scheme="https://junxiansen.cn/tags/%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>4-MFC基于对话框学习控件(3)</title>
    <link href="https://junxiansen.cn/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-3.html"/>
    <id>https://junxiansen.cn/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-3.html</id>
    <published>2022-08-23T08:02:33.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下拉框控件使用"><a href="#下拉框控件使用" class="headerlink" title="下拉框控件使用"></a>下拉框控件使用</h2><ul><li><p>下拉框控件名称为Combo Box，属性中添加数据通过分号隔开，默认情况下Combo Box类型是可以编辑的，需要设置为DropList（下拉列表）不可编辑。</p></li><li><p>如果行为栏中Sort（排序选项），True时会将数据从字符A-Z排序，False时会根据你填写的数据来排序，一般选择False。</p></li><li><p>添加数据使用<code>AddString()</code>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加下拉选项</span></span><br><span class="line">m_cbx.<span class="built_in">AddString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;唐僧&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-3/%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%8B%89%E9%80%89%E9%A1%B9-16612421396878.jpg" alt="添加下拉选项"></p></li><li><p>插入数据使用<code>InserString()</code>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入下拉选项</span></span><br><span class="line">m_cbx.<span class="built_in">InsertString</span>(<span class="number">4</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;白龙马&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>删除数据使用<code>DeleteString(</code>)函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除下拉选项</span></span><br><span class="line">m_cbx.<span class="built_in">DeleteString</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置默认选项使用<code>SetCurSel()</code>函数，大致意思为Set Current Select</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置默认选项</span></span><br><span class="line">m_cbx.<span class="built_in">SetCurSel</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>添加OnCbnSelchangeCombo选择变化的控件事件，其中<code>GetCurSel()</code>函数可以获取当前的索引，返回一个int型整数，<code>getLBText(int index, CString str)</code>函数根据索引值获取内容。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CcomboBoxContrlDlg::OnCbnSelchangeCombo2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">  <span class="type">int</span> index = m_cbx.<span class="built_in">GetCurSel</span>();</span><br><span class="line">  CString str;</span><br><span class="line">  m_cbx.<span class="built_in">GetLBText</span>(index,str);</span><br><span class="line">  <span class="built_in">MessageBox</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-3/%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%8B%89%E9%80%89%E9%A1%B9-16612421396878.jpg" alt="添加下拉选项-16612421396878"></p></li></ul><h2 id="列表控件的使用"><a href="#列表控件的使用" class="headerlink" title="列表控件的使用"></a>列表控件的使用</h2><ul><li><p>列表控件名称为List Control，属性中在View(视图)选择report模式（报表模式）。</p></li><li><p>添加表头函数为InsertColumn(),其中4个参数依次分别是：索引、内容、对齐方式、列宽度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CString str[] = &#123;<span class="built_in">TEXT</span>(<span class="string">&quot;姓名&quot;</span>),<span class="built_in">TEXT</span>(<span class="string">&quot;性别&quot;</span>),<span class="built_in">TEXT</span>(<span class="string">&quot;年龄&quot;</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; <span class="number">3</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">m_list.<span class="built_in">InsertColumn</span>(i, str[i], LVCFMT_LEFT,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置正文，从0开始索引，先插入一项，再设置该项的值。其中SetItemText(行，列，具体内容)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置正文</span></span><br><span class="line">m_list.<span class="built_in">InsertItem</span>(<span class="number">0</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">m_list.<span class="built_in">SetItemText</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;男&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>设置列表如图所示：</p><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-3/%E8%AE%BE%E7%BD%AE%E5%88%97%E8%A1%A8.png" alt="设置列表"></p><p>代码可以写为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">CString name;</span><br><span class="line">name.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;张三_%d&quot;</span>), i);</span><br><span class="line">m_list.<span class="built_in">InsertItem</span>(i, name);</span><br><span class="line"></span><br><span class="line">m_list.<span class="built_in">SetItemText</span>(i, ++j, <span class="built_in">TEXT</span>(<span class="string">&quot;男&quot;</span>));</span><br><span class="line">m_list.<span class="built_in">SetItemText</span>(i, ++j, <span class="built_in">TEXT</span>(<span class="string">&quot;23&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置列表属性和整行选中状态，在列表背景下显示网格</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_list.<span class="built_in">SetExtendedStyle</span>(m_list.<span class="built_in">GetExtendedStyle</span>() | LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES);</span><br></pre></td></tr></table></figure></li></ul><h2 id="树控件的使用"><a href="#树控件的使用" class="headerlink" title="树控件的使用"></a>树控件的使用</h2><p>在属性栏中Has Lines（具有线）让树控件有线连接。Has Buttons（具有按钮）让树控件有按钮进行折叠，展开。</p><p>Lines At Root（行在根处）根节点与根节点有线连接。</p><ul><li><p>1设置图标列表集合</p><p>SetImageList()</p><p>CImageList list; 需要&#x3D;&#x3D;把图片集合变量添加到头文件&#x3D;&#x3D;定义为全局变量</p></li><li><p>2在资源视图ICON中添加资源，导入ICON图片文件</p><p>创建图片集合list.Create(cx,cy,nFlags,nInitial,nGrow)</p><p>添加具体的图片list.Add(HICON hicon),参数类型为ICON类型</p><p>创建HICON图标HICON icons[4]</p><p>icon[0] &#x3D; AfxGetApp()-&gt;LoadIconW(nID),nID为图片的ID号</p></li><li><p>通过循环将4个图片添加到list里面</p><p>for(int i &#x3D;0;i&lt;4;i++)</p><p>{</p><p>​     list.Add(icons[i]);</p><p>}</p></li><li><p>将添加好的list写入SetImageList()参数中</p></li><li><p>设置节点使用InserItem()，该函数返回值是HTREEITEM</p></li><li><p>必须保存图片的集合，所以要定义CImageList list定义在.h文件中做成员的属性</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line"></span><br><span class="line">HICON icons[<span class="number">4</span>];</span><br><span class="line">icons[<span class="number">0</span>] = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIconW</span>(IDI_ICON1);</span><br><span class="line">icons[<span class="number">1</span>] = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIconW</span>(IDI_ICON2);</span><br><span class="line">icons[<span class="number">2</span>] = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIconW</span>(IDI_ICON3);</span><br><span class="line">icons[<span class="number">3</span>] = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIconW</span>(IDI_ICON4);</span><br><span class="line"></span><br><span class="line">list.<span class="built_in">Create</span>(<span class="number">30</span>, <span class="number">30</span>, ILC_COLOR32, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i =<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) </span><br><span class="line">&#123;</span><br><span class="line">list.<span class="built_in">Add</span>(icons[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_tree.<span class="built_in">SetImageList</span>(&amp;list, TVSIL_NORMAL);</span><br><span class="line"></span><br><span class="line">HTREEITEM root = m_tree.<span class="built_in">InsertItem</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;根节点&quot;</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">HTREEITEM parent = m_tree.<span class="built_in">InsertItem</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;父节点&quot;</span>), <span class="number">1</span>, <span class="number">1</span>, root);</span><br><span class="line">HTREEITEM sub1 = m_tree.<span class="built_in">InsertItem</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;子节点1&quot;</span>), <span class="number">2</span>, <span class="number">2</span>, parent);</span><br><span class="line">HTREEITEM sub2 = m_tree.<span class="built_in">InsertItem</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;子节点2&quot;</span>), <span class="number">3</span>, <span class="number">3</span>, parent);</span><br><span class="line"></span><br><span class="line">m_tree.<span class="built_in">SelectItem</span>(parent);</span><br></pre></td></tr></table></figure><p>其他api介绍：</p><p>1）SelectItem(HTREEITEM I);默认选择一个节点。</p><p>2）节点与节点切换时需要TVN_SELCHANGED控件事件</p><p>​GetSelectedItem()返回一个HTREITEM类型变量</p><p>​        GetItemText(HTREEITEM)参数类型为HTREEITEM，返回值时CString类型</p><p>选择变化的节点代码可以这么写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTreeContrlDlg::OnTvnSelchangedTree1</span><span class="params">(NMHDR* pNMHDR, LRESULT* pResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LPNMTREEVIEW pNMTreeView = <span class="built_in">reinterpret_cast</span>&lt;LPNMTREEVIEW&gt;(pNMHDR);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">HTREEITEM item;</span><br><span class="line">item = m_tree.<span class="built_in">GetSelectedItem</span>();</span><br><span class="line">CString str = m_tree.<span class="built_in">GetItemText</span>(item);</span><br><span class="line"><span class="built_in">MessageBox</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树控件学习运行如图：</p><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-3/%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C.jpg" alt="显示结果"></p><h2 id="标签页的使用"><a href="#标签页的使用" class="headerlink" title="标签页的使用"></a>标签页的使用</h2><p>标签页控件叫做Tab Control，首先在项目中引用TabSheet.cpp和TabSheet.h文件。</p><ul><li>TabSheet.h代码如下：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(AFX_TABSHEET_H__42EE262D_D15F_46D5_8F26_28FD049E99F4__INCLUDED_)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AFX_TABSHEET_H__42EE262D_D15F_46D5_8F26_28FD049E99F4__INCLUDED_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _MSC_VER &gt; 1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _MSC_VER &gt; 1000</span></span></span><br><span class="line"><span class="comment">// TabSheet.h : header file</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// CTabSheet window</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXPAGE 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTabSheet</span> : <span class="keyword">public</span> CTabCtrl</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Construction</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CTabSheet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attributes</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">// Operations</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">// Overrides</span></span><br><span class="line"><span class="comment">// ClassWizard generated virtual function overrides</span></span><br><span class="line"><span class="comment">//&#123;&#123;AFX_VIRTUAL(CTabSheet)</span></span><br><span class="line"><span class="comment">//&#125;&#125;AFX_VIRTUAL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetCurSel</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SetCurSel</span><span class="params">(<span class="type">int</span> nItem)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetRect</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">AddPage</span><span class="params">(LPCTSTR title, CDialog *pDialog, UINT ID)</span></span>;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">CTabSheet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generated message map functions</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">LPCTSTR m_Title[MAXPAGE];</span><br><span class="line">UINT m_IDD[MAXPAGE];</span><br><span class="line">CDialog* m_pPages[MAXPAGE];</span><br><span class="line"><span class="type">int</span> m_nNumOfPages;</span><br><span class="line"><span class="type">int</span> m_nCurrentPage;</span><br><span class="line"><span class="comment">//&#123;&#123;AFX_MSG(CTabSheet)</span></span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnLButtonDown</span><span class="params">(UINT nFlags, CPoint point)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnHScroll</span><span class="params">(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar)</span></span>;</span><br><span class="line"><span class="comment">//&#125;&#125;AFX_MSG</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;&#123;AFX_INSERT_LOCATION&#125;&#125;</span></span><br><span class="line"><span class="comment">// Microsoft Visual C++ will insert additional declarations immediately before the previous line.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !defined(AFX_TABSHEET_H__42EE262D_D15F_46D5_8F26_28FD049E99F4__INCLUDED_)</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>TabSheet.cpp代码如下：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TabSheet.cpp : implementation file</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"><span class="comment">//#include &quot;Property5.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TabSheet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> THIS_FILE</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> THIS_FILE[] = __FILE__;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// CTabSheet</span></span><br><span class="line"></span><br><span class="line">CTabSheet::<span class="built_in">CTabSheet</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_nNumOfPages = <span class="number">0</span>;</span><br><span class="line">m_nCurrentPage = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CTabSheet::~<span class="built_in">CTabSheet</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CTabSheet, CTabCtrl)</span><br><span class="line"><span class="comment">//&#123;&#123;AFX_MSG_MAP(CTabSheet)</span></span><br><span class="line"><span class="built_in">ON_WM_LBUTTONDOWN</span>()</span><br><span class="line"><span class="built_in">ON_WM_HSCROLL</span>()</span><br><span class="line"><span class="comment">//&#125;&#125;AFX_MSG_MAP</span></span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// CTabSheet message handlers</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CTabSheet::AddPage</span><span class="params">(LPCTSTR title, CDialog *pDialog,UINT ID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( MAXPAGE == m_nNumOfPages )</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">m_nNumOfPages++;</span><br><span class="line"></span><br><span class="line">m_pPages[m_nNumOfPages<span class="number">-1</span>] = pDialog;</span><br><span class="line">m_IDD[m_nNumOfPages<span class="number">-1</span>] = ID;</span><br><span class="line">m_Title[m_nNumOfPages<span class="number">-1</span>] = title;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTabSheet::SetRect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CRect tabRect, itemRect;</span><br><span class="line"><span class="type">int</span> nX, nY, nXc, nYc;</span><br><span class="line"></span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;tabRect);</span><br><span class="line"><span class="built_in">GetItemRect</span>(<span class="number">0</span>, &amp;itemRect);</span><br><span class="line"></span><br><span class="line">nX=itemRect.left;</span><br><span class="line">nY=itemRect.bottom+<span class="number">1</span>;</span><br><span class="line">nXc=tabRect.right-itemRect.left<span class="number">-2</span>;</span><br><span class="line">nYc=tabRect.bottom-nY<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">m_pPages[<span class="number">0</span>]-&gt;<span class="built_in">SetWindowPos</span>(&amp;wndTop, nX, nY, nXc, nYc, SWP_SHOWWINDOW);</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> nCount=<span class="number">1</span>; nCount &lt; m_nNumOfPages; nCount++ )</span><br><span class="line">m_pPages[nCount]-&gt;<span class="built_in">SetWindowPos</span>(&amp;wndTop, nX, nY, nXc, nYc, SWP_HIDEWINDOW);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTabSheet::Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; m_nNumOfPages; i++ )</span><br><span class="line">&#123;</span><br><span class="line">m_pPages[i]-&gt;<span class="built_in">Create</span>( m_IDD[i], <span class="keyword">this</span> );</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">AfxGetMainWnd</span>())</span><br><span class="line"><span class="built_in">InsertItem</span>( i, m_Title[i] );</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_pPages[<span class="number">0</span>]-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line"><span class="keyword">for</span>( i=<span class="number">1</span>; i &lt; m_nNumOfPages; i++)</span><br><span class="line">m_pPages[i]-&gt;<span class="built_in">ShowWindow</span>(SW_HIDE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetRect</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTabSheet::OnLButtonDown</span><span class="params">(UINT nFlags, CPoint point)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CTabCtrl::<span class="built_in">OnLButtonDown</span>(nFlags, point);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m_nCurrentPage != <span class="built_in">GetCurFocus</span>())</span><br><span class="line">&#123;</span><br><span class="line">m_pPages[m_nCurrentPage]-&gt;<span class="built_in">ShowWindow</span>(SW_HIDE);</span><br><span class="line">m_nCurrentPage=<span class="built_in">GetCurFocus</span>();</span><br><span class="line">m_pPages[m_nCurrentPage]-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line"></span><br><span class="line"><span class="comment">//m_pPages[m_nCurrentPage]-&gt;SetFocus();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AfxMessageBox(&quot;бЁжа&quot;); wbm test</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CTabSheet::SetCurSel</span><span class="params">(<span class="type">int</span> nItem)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( nItem &lt; <span class="number">0</span> || nItem &gt;= m_nNumOfPages)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret = m_nCurrentPage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m_nCurrentPage != nItem )</span><br><span class="line">&#123;</span><br><span class="line">m_pPages[m_nCurrentPage]-&gt;<span class="built_in">ShowWindow</span>(SW_HIDE);</span><br><span class="line">m_nCurrentPage = nItem;</span><br><span class="line">m_pPages[m_nCurrentPage]-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line"></span><br><span class="line"><span class="comment">//m_pPages[m_nCurrentPage]-&gt;SetFocus();</span></span><br><span class="line">CTabCtrl::<span class="built_in">SetCurSel</span>(nItem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CTabSheet::GetCurSel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> CTabCtrl::<span class="built_in">GetCurSel</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTabSheet::OnHScroll</span><span class="params">(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your message handler code here and/or call default</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CTabCtrl::<span class="built_in">OnHScroll</span>(nSBCode, nPos, pScrollBar);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Tab Control右键添加变量，变量名称为m_tab，类型为CTabSheet（&#x3D;&#x3D;一点要修改其变量类型&#x3D;&#x3D;）</p></li><li><p>创建两个标签页，在资源视图Dialog选项中右键插入Dialog，更改其属性，边框（Border）选择None，样式（Style）选择Child。</p></li></ul><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-3/%E6%9B%B4%E6%94%B9%E5%90%8E%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5-16612420985674.jpg" alt="更改后的标签页"></p><ul><li><p>在标签页中添加类，对应Qt中一个ui对应一个.h和一个.cpp文件</p></li><li><p>在主窗口中添加标签。AddPage（）方法中第一参数为标题，第二个参数为具体添加的标签页，第三个参数为该标签页对应的ID号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_tab.<span class="built_in">AddPage</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;页面2&quot;</span>), &amp;dlg2, IDD_DIALOG2);</span><br></pre></td></tr></table></figure></li><li><p>最后一步调用show（）方法来让添加的标签显示出来。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示</span></span><br><span class="line">m_tab.<span class="built_in">Show</span>();</span><br></pre></td></tr></table></figure><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-3/%E6%A0%87%E7%AD%BE%E9%A1%B5%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-16612421103876.jpg" alt="标签页运行结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下拉框控件使用&quot;&gt;&lt;a href=&quot;#下拉框控件使用&quot; class=&quot;headerlink&quot; title=&quot;下拉框控件使用&quot;&gt;&lt;/a&gt;下拉框控件使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下拉框控件名称为Combo Box，属性中添加数据通过分号隔开，默认情况下Comb</summary>
      
    
    
    
    <category term="QT和MFC" scheme="https://junxiansen.cn/categories/QT%E5%92%8CMFC/"/>
    
    
    <category term="MFC" scheme="https://junxiansen.cn/tags/MFC/"/>
    
    <category term="MFC静态文本控件" scheme="https://junxiansen.cn/tags/MFC%E9%9D%99%E6%80%81%E6%96%87%E6%9C%AC%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>4-MFC基于对话框学习控件(2)</title>
    <link href="https://junxiansen.cn/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-2.html"/>
    <id>https://junxiansen.cn/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-2.html</id>
    <published>2022-08-15T08:38:22.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编辑框的使用"><a href="#编辑框的使用" class="headerlink" title="编辑框的使用"></a>编辑框的使用</h2><ul><li><p>1）编辑框控件名称为Edit Control。此控件有一个小bug，当输入文本后按下回车后，窗口会关闭，需要重写OnOK()函数。</p><p>– 在&#x3D;&#x3D;类视图&#x3D;&#x3D;中Dlg右键属性，在属性界面选择重写按钮。如图所示</p></li></ul><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-2/1.png" alt="1"></p><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-2/4.png" alt="4"></p><p>添加ok函数，在函数中注释对应代码。</p><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-2/2.png" alt="2"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CEditContrlDlg::OnOK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加专用代码和/或调用基类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CDialogEx::OnOK();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>2）Edit Control控件的属性更改。</p><p>​      mutiline多行，True时编辑框可以编辑多行，False时只能编辑一行。</p><p>​      wantreturn想要返回，True时可以通过回车键来编辑下一行。False时按下回车不能进入下一行。</p><p>​      Auto HScroll和Auto VScroll分别可以让编辑框水平和垂直写东西。</p><p>​      滚动条有Horizontal Scroll(水平滚动)和Vertial Scroll(垂直滚动)，分别进行上下，左右拉动。</p></li><li><p>3）GetWindowText()和SetWindowText()获取和设置文本值。</p></li><li><p>4）退出当前对话框一个有三种方式。</p><p>​       第一种退出当前的对话框。<code>exit(0);</code></p><p>​       第二种以确认的方式退出当前的对话框。<code>OnOK();</code></p><p>​       第三种以取消的方式退出当前的对话框。<code>OnCancel();</code></p></li><li><p>5）对控件添加变量时还可以选择Value（值），类型可更换，如下图所示。</p><p><img src="/../images/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-2/3.png" alt="3"></p></li><li><p>6）该控件所关联的值就是m_text，类型为CString，可以直接修改其值。</p><p><code>m_text = &quot;哈哈&quot;;</code></p></li><li><p>7）<code>UpdateData(TRUE)</code>,是将控件的内容同步到变量中，比如获取当前编辑框内容按钮代码步骤,先将控件的内容同步到m_text变量中，然后MessageBox获取内容。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CEditContrlDlg::OnBnClickedButton</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UpdateData</span>(TRUE);</span><br><span class="line"><span class="built_in">MessageBox</span>(m_text);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>8）<code>UpdateData(FALSE);</code>先设置变量内容，然后将变量同步到控件中。比如设置当前编辑框内容按钮代码步骤，先定义变量m_text,然后同步到控件中。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CEditContrlDlg::OnBnClickedButton</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">m_text = <span class="string">&quot;哈哈&quot;</span>;</span><br><span class="line"><span class="built_in">UpdateData</span>(FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;编辑框的使用&quot;&gt;&lt;a href=&quot;#编辑框的使用&quot; class=&quot;headerlink&quot; title=&quot;编辑框的使用&quot;&gt;&lt;/a&gt;编辑框的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1）编辑框控件名称为Edit Control。此控件有一个小bug，当输入文本后按下回车后</summary>
      
    
    
    
    <category term="QT和MFC" scheme="https://junxiansen.cn/categories/QT%E5%92%8CMFC/"/>
    
    
    <category term="MFC" scheme="https://junxiansen.cn/tags/MFC/"/>
    
    <category term="MFC编辑框控件" scheme="https://junxiansen.cn/tags/MFC%E7%BC%96%E8%BE%91%E6%A1%86%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>4-MFC基于对话框学习控件(1)</title>
    <link href="https://junxiansen.cn/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-1.html"/>
    <id>https://junxiansen.cn/4-MFC%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AD%A6%E4%B9%A0%E6%8E%A7%E4%BB%B6-1.html</id>
    <published>2022-08-15T05:35:25.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于对话框学习控件"><a href="#基于对话框学习控件" class="headerlink" title="基于对话框学习控件"></a>基于对话框学习控件</h2><ul><li>对话框分为模态和非模态</li><li>按钮可以点在captain修改内容或者点击一次输入内容</li><li>触发事件有三种方法，右侧属性中的闪电图标，右侧按钮添加事件处理程序，双击按钮</li><li>插入窗口（添加ui），在窗口中右键添加类，类似于Qt中一个.h,一个.c对应一个ui界面</li><li>模态窗口创建，先定义对象，然后使用<code>DoModal()</code>函数</li><li>非模态窗口创建，先定义个全局的对象，在初始化函数创建窗口，通过按钮点击实现显示出来。</li></ul><h2 id="静态文本控件"><a href="#静态文本控件" class="headerlink" title="静态文本控件"></a>静态文本控件</h2><ul><li>添加变量，以STATIC结尾的ID是不可以添加变量的，需要修改ID</li><li>设置内容 <code>setWindowTextW()</code>，按钮同样使用</li><li>获取内容 <code>getWindowTextW()</code>，按钮同样适用</li><li>利用静态文本显示图片，图片类型必须是bmp的格式</li><li>设置图片宏，写在初始化代码中，最后静态控件设置bitmap</li><li>禁用按钮，<code>EnableWindow(FALSE)</code></li></ul><p>在资源视图对控件添加变量实现绑定，添加的变量在DoDataExchange()函数中可以看到，将Static Text2控件添加变量，变量值为m_label。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMy2CStaticTextDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"></span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_TEXT2, m_label);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据实际Static Text控件的大小，将图片平铺控件中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置静态控件窗口风格为位图居中显示</span></span><br><span class="line">m_label.<span class="built_in">ModifyStyle</span>(<span class="number">0xf</span>, SS_BITMAP | SS_CENTERIMAGE);</span><br><span class="line"></span><br><span class="line">CRect rect;</span><br><span class="line">m_label.<span class="built_in">GetWindowRect</span>(rect);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过路径获取bitmap句柄</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HBMP(filepath,width,height) (HBITMAP)LoadImage(AfxGetInstanceHandle(),filepath,IMAGE_BITMAP,width,height,LR_LOADFROMFILE|LR_CREATEDIBSECTION)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态控件设置bitmap</span></span><br><span class="line">m_label.<span class="built_in">SetBitmap</span>(<span class="built_in">HBMP</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;./1.bmp&quot;</span>), rect.<span class="built_in">Width</span>(),rect.<span class="built_in">Height</span>()));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于对话框学习控件&quot;&gt;&lt;a href=&quot;#基于对话框学习控件&quot; class=&quot;headerlink&quot; title=&quot;基于对话框学习控件&quot;&gt;&lt;/a&gt;基于对话框学习控件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对话框分为模态和非模态&lt;/li&gt;
&lt;li&gt;按钮可以点在captain修改</summary>
      
    
    
    
    <category term="QT和MFC" scheme="https://junxiansen.cn/categories/QT%E5%92%8CMFC/"/>
    
    
    <category term="MFC" scheme="https://junxiansen.cn/tags/MFC/"/>
    
    <category term="MFC静态文本控件" scheme="https://junxiansen.cn/tags/MFC%E9%9D%99%E6%80%81%E6%96%87%E6%9C%AC%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>1-Ubuntu桌面基础操作</title>
    <link href="https://junxiansen.cn/1-Ubuntu%E6%A1%8C%E9%9D%A2%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C.html"/>
    <id>https://junxiansen.cn/1-Ubuntu%E6%A1%8C%E9%9D%A2%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C.html</id>
    <published>2022-08-11T14:22:50.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu桌面简单操作"><a href="#Ubuntu桌面简单操作" class="headerlink" title="Ubuntu桌面简单操作"></a>Ubuntu桌面简单操作</h2><p>根目录下面的bin和sbin，存放必需的app。</p><p>usr目录的意思是Unix Software Resource不是用户的意思，usr里存放可分享不可变动的数据。usr目录下的bin和sbin存放的是非必需要的app。</p><p>var针对可变动的文件，包括缓存（cache）、log文件等。</p><p>proc用来挂载虚拟的proc文件系统，可以查看各种的进程信息。</p><p>sys用来挂载虚拟sys文件系统，可以查看系统信息，比如设备信息。</p><p>proc和sys用来挂载虚拟文件系统。</p><h2 id="Linux入门命令"><a href="#Linux入门命令" class="headerlink" title="Linux入门命令"></a>Linux入门命令</h2><ul><li><p>pwd                   显示当前所在的目录    &#x3D;&#x3D;p&#x3D;&#x3D;rint &#x3D;&#x3D;w&#x3D;&#x3D;ork    &#x3D;&#x3D;d&#x3D;&#x3D;irectory</p></li><li><p>ls                        显示当前目录下的文件</p></li><li><p>cd                       切换路径 &#x3D;&#x3D;c&#x3D;&#x3D;hange &#x3D;&#x3D;d&#x3D;&#x3D;irectory</p></li><li><p>cd ..                    返回上一级路径</p></li><li><p>mkdir                 新建目录</p></li><li><p>rmdir                 删除目录</p></li><li><p>touch                 新建文件</p></li><li><p>cp                       复制文件</p></li><li><p>rm                      删除文件</p></li><li><p>cat                      将文件内容显示到终端</p></li><li><p>clear                  清楚屏幕显示的内容</p></li></ul><h2 id="shell命令解释器说明"><a href="#shell命令解释器说明" class="headerlink" title="shell命令解释器说明"></a>shell命令解释器说明</h2><p>shell是一个应用程序，可以通过键盘，串口给它发送命令，回车后执行命令。</p><ul><li><p>在终端输入字符串后，shell会解析字符串，字符串用空格分为好几部分</p><p>第一部分就是程序名、命令名，其他部分是参数，例如ls -l，ls为程序，-l为参数。</p></li><li><p>shell会去哪里寻找程序呢？去PATH环境变量所指示的位置寻找</p></li><li><p>shell找到程序后，启动该程序传入参数<br>shell还有其他功能，可以编写脚本等。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Ubuntu桌面简单操作&quot;&gt;&lt;a href=&quot;#Ubuntu桌面简单操作&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu桌面简单操作&quot;&gt;&lt;/a&gt;Ubuntu桌面简单操作&lt;/h2&gt;&lt;p&gt;根目录下面的bin和sbin，存放必需的app。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://junxiansen.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://junxiansen.cn/tags/Linux/"/>
    
    <category term="Ubuntu桌面" scheme="https://junxiansen.cn/tags/Ubuntu%E6%A1%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>3-MFC消息映射</title>
    <link href="https://junxiansen.cn/3-MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84.html"/>
    <id>https://junxiansen.cn/3-MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84.html</id>
    <published>2022-08-11T14:14:55.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<p>MFC消息映射机制</p><p>消息映射是一个将消息和成员函数相互关联的表。</p><ul><li>声明宏，写到.h中</li><li>分解宏，写到.cpp中</li><li>找消息宏，写到分解宏中间</li><li>把函数原型声明写到.h中</li><li>函数的实现写到.cpp中</li><li>例如鼠标、键盘、绘图消息</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MFC消息映射机制&lt;/p&gt;
&lt;p&gt;消息映射是一个将消息和成员函数相互关联的表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明宏，写到.h中&lt;/li&gt;
&lt;li&gt;分解宏，写到.cpp中&lt;/li&gt;
&lt;li&gt;找消息宏，写到分解宏中间&lt;/li&gt;
&lt;li&gt;把函数原型声明写到.h中&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="QT和MFC" scheme="https://junxiansen.cn/categories/QT%E5%92%8CMFC/"/>
    
    
    <category term="MFC" scheme="https://junxiansen.cn/tags/MFC/"/>
    
    <category term="MFC消息映射" scheme="https://junxiansen.cn/tags/MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>2-MFC窗口创建</title>
    <link href="https://junxiansen.cn/2-MFC%E7%AA%97%E5%8F%A3%E5%88%9B%E5%BB%BA.html"/>
    <id>https://junxiansen.cn/2-MFC%E7%AA%97%E5%8F%A3%E5%88%9B%E5%BB%BA.html</id>
    <published>2022-08-11T14:10:51.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<ul><li>MFC是以C++类的形式封装了Windows API，编写MFC程序需要包含#include &lt;afxwin.h&gt;头文件</li><li>自定义类继承 CWinApp应用程序类，MyApp app 应用程序对象，应用程序对象有且仅有一个</li><li>程序入口 InitInstance</li><li>入口里创建窗口</li><li>窗口类MyFrame继承CFrameWind</li><li>创建窗口对象</li><li>显示和更新</li><li>m_pMainWnd &#x3D; frame &#x2F;&#x2F;保存指向应用程序的主窗口的指针</li><li>returen TURE</li><li>对项目更改配置</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;afxwin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myapp</span> :<span class="keyword">public</span> CWinApp</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BOOL <span class="title">InitInstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>:<span class="keyword">public</span> CFrameWnd</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyFrame</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MFC.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Myapp app;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Myapp::InitInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyFrame* frame = <span class="keyword">new</span> MyFrame;</span><br><span class="line"></span><br><span class="line">frame-&gt;<span class="built_in">ShowWindow</span>(SW_SHOWNORMAL);</span><br><span class="line">frame-&gt;<span class="built_in">UpdateWindow</span>();</span><br><span class="line"></span><br><span class="line">m_pMainWnd = frame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyFrame::<span class="built_in">MyFrame</span>() </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Create</span>(<span class="literal">NULL</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;WINDOWS&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CWinAPP继承于CWinThread，CWinThread数据成员有m_PMainWind，通过指针绑定自定义的主窗口，进行操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;MFC是以C++类的形式封装了Windows API，编写MFC程序需要包含#include &amp;lt;afxwin.h&amp;gt;头文件&lt;/li&gt;
&lt;li&gt;自定义类继承 CWinApp应用程序类，MyApp app 应用程序对象，应用程序对象有且仅有一个&lt;/li&gt;
</summary>
      
    
    
    
    <category term="QT和MFC" scheme="https://junxiansen.cn/categories/QT%E5%92%8CMFC/"/>
    
    
    <category term="MFC" scheme="https://junxiansen.cn/tags/MFC/"/>
    
    <category term="MFC窗口创建" scheme="https://junxiansen.cn/tags/MFC%E7%AA%97%E5%8F%A3%E5%88%9B%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>1-底层WinMain入口函数</title>
    <link href="https://junxiansen.cn/1-%E5%BA%95%E5%B1%82WinMain%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0.html"/>
    <id>https://junxiansen.cn/1-%E5%BA%95%E5%B1%82WinMain%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0.html</id>
    <published>2022-08-11T13:57:20.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<p>SDK:软件开发集成包</p><p>API：应用程序编程接口</p><p>windows窗口可分为客户区和非客户区</p><p>句柄：在windows程序中，有各种各样的资源（窗口、图标、光标等），系统在创建这些资源时会为他们分配内存，并返回这些资源的标识号，这些标识号称为句柄。</p><p>window程序步骤分为</p><p>1）WinMain函数的定义</p><p>2）创建一个窗口</p><p>3）进行消息循环</p><p>4）编写窗口过程函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">底层窗口实现，WinMain入口函数`</span><br><span class="line"></span><br><span class="line"><span class="comment">//WINAPI 代表__stdcall参数传递顺序从右到左依次入栈，并且在函数返回前，清空堆栈`</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance,LPSTR lpCmdLine,nShowCmd)</span>`</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、设计窗口`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、注册窗口`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、创建窗口`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、显示与更新窗口`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5、设计消息循环`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6、处理消息（窗口过程）`</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SDK:软件开发集成包&lt;/p&gt;
&lt;p&gt;API：应用程序编程接口&lt;/p&gt;
&lt;p&gt;windows窗口可分为客户区和非客户区&lt;/p&gt;
&lt;p&gt;句柄：在windows程序中，有各种各样的资源（窗口、图标、光标等），系统在创建这些资源时会为他们分配内存，并返回这些资源的标识号，这些标识</summary>
      
    
    
    
    <category term="QT和MFC" scheme="https://junxiansen.cn/categories/QT%E5%92%8CMFC/"/>
    
    
    <category term="MFC" scheme="https://junxiansen.cn/tags/MFC/"/>
    
    <category term="WinMain函数" scheme="https://junxiansen.cn/tags/WinMain%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Markdown高级语法</title>
    <link href="https://junxiansen.cn/markdown-advance-syntax.html"/>
    <id>https://junxiansen.cn/markdown-advance-syntax.html</id>
    <published>2022-05-08T09:04:21.000Z</published>
    <updated>2022-05-08T09:04:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>只有少数编辑器支持，或者需要安装相应的扩展渲染，使用前请先预览确认。</p><span id="more"></span><h1 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Term 1</span><br><span class="line">Term 2</span><br><span class="line">:   Definition A</span><br><span class="line">:   Definition B</span><br></pre></td></tr></table></figure><p>会被编译成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>Term 1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>Term 2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Definition A<span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Definition A<span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>通过<code>[TOC]</code>标记来插入目录。</p><p>在编辑器不支持<code>[TOC]</code>标记的情况下可以使用添加id的方法构建目录。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## Directory</span></span><br><span class="line"><span class="bullet">*</span> [<span class="string">1.Content one</span>](<span class="link">#chapter1</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">2.Content two</span>](<span class="link">#chapter2</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">## <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;chapter1&quot;</span>&gt;</span></span>1.Content one<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="section">## <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;chapter2&quot;</span>&gt;</span></span>2.Content two<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><h1 id="TeX公式"><a href="#TeX公式" class="headerlink" title="TeX公式"></a>TeX公式</h1><p>内联的TeX公式使用一个美元符号标记。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</span><br></pre></td></tr></table></figure><p>会被编译成<br>内联（行内）公式：$\Gamma(n) &#x3D; (n-1)!\quad\forall n\in\mathbb N$</p><p>TeX公式块用独占一行的两个美元符号来标记。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\left \lbrace \sum<span class="emphasis">_&#123;i=0&#125;^n i^3 = \frac&#123;(n^2+n)(n+6)&#125;&#123;9&#125; \right \rbrace$$</span></span><br></pre></td></tr></table></figure><p>会被编译成</p><p>$$\left \lbrace \sum_{i&#x3D;0}^n i^3 &#x3D; \frac{(n^2+n)(n+6)}{9} \right \rbrace$$</p><p>如果你的编辑器不支持这个功能，可以手动解决。首先引入mathjax脚本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后，在需要插入公式的地方使用 <code>&lt;script&gt;</code> 标签包裹公式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;math/tex&quot;</span>&gt;</span></span>\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N<span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;math/tex; mode=display&quot;</span>&gt;</span></span></span><br><span class="line">\Gamma(z) = \int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,.</span></span><br><span class="line"><span class="emphasis"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>以上公式展示效果，在实际显示过程中，根据网络加载速度不同会有不同的解析展示速度，TeX的语法参考请见<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">这里</a>。</p><h1 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h1><p>语法为在代码块开始行后面加入语法声明，如 ```mermaid ，然后可以像这样来画uml时序图：</p><pre class="mermaid">sequenceDiagram  Alice->>Bob: Hello Bob,how are you?  Note right of Bob: Bob thinks  Bob-->>Alice: I am fine thanks! and U?  Note left of Alice: SB</pre><p>其MarkDown代码如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">`\`</span>\`mermaid</span><br><span class="line">sequenceDiagram</span><br><span class="line">  Alice-&gt;&gt;Bob: Hello Bob,how are you?</span><br><span class="line">  Note right of Bob: Bob thinks</span><br><span class="line">  Bob--&gt;&gt;Alice: I am fine thanks! and U?</span><br><span class="line">  Note left of Alice: SB</span><br><span class="line">\<span class="code">`\`</span>\` #代码块标识会被解析，实际上写代码块时不用添加转义符“\”</span><br></pre></td></tr></table></figure><p>时序图的语法请见 <a href="https://mermaidjs.github.io/sequenceDiagram.html">这里</a> 或 <a href="http://bramp.github.io/js-sequence-diagrams/">这里</a>。</p><p>uml流程图：</p><pre class="mermaid">  graph LR;    A-->B & C-->D;</pre><p>其实现代码如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">`\`</span>\`mermaid</span><br><span class="line">graph LR;</span><br><span class="line">  A--&gt;B &amp; C--&gt;D;</span><br><span class="line">\<span class="code">`\`</span>\`</span><br></pre></td></tr></table></figure><p>流程图的语法请见 <a href="https://mermaidjs.github.io/flowchart.html">这里</a>， 更复杂点的flowchart可以看 <a href="http://adrai.github.io/flowchart.js/">这里</a> 。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="/how-to-draw-flowchart-with-markdown.html">MarkDown文档中如何画出流程图</a></li><li><a href="https://github.com/wizardforcel/markdown-simple-world">https://github.com/wizardforcel/markdown-simple-world</a></li><li><a href="http://stevenshi.me/2017/06/26/hexo-insert-formula/">http://stevenshi.me/2017/06/26/hexo-insert-formula/</a></li><li><a href="https://blog.csdn.net/u013282174/article/details/80666123">https://blog.csdn.net/u013282174/article/details/80666123</a></li><li><a href="https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html">https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html</a></li><li><a href="https://mermaidjs.github.io/">https://mermaidjs.github.io/</a></li></ol><script type="text/javascript" async  src="https://unpkg.com/mermaid@9.1.1/dist/mermaid.min.js"></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;只有少数编辑器支持，或者需要安装相应的扩展渲染，使用前请先预览确认。&lt;/p&gt;</summary>
    
    
    
    <category term="学编程" scheme="https://junxiansen.cn/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="混技能" scheme="https://junxiansen.cn/tags/%E6%B7%B7%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>学术简历样本</title>
    <link href="https://junxiansen.cn/academia-example.html"/>
    <id>https://junxiansen.cn/academia-example.html</id>
    <published>2022-02-21T18:02:02.000Z</published>
    <updated>2023-03-31T05:54:11.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是个学术简历示例，内容源文件：<code>source/_posts/academia-example.md</code></p></blockquote><blockquote><p>如果本页排序在站内靠后，该页内容不会在 <code>Academia</code> 主题首页显示，不知道为何，如果遇到不显示的问题，删除其他内容或者将本页排序调整到靠前几页</p></blockquote><h1 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h1><p>This is a simple page for academic website based on Hexo. It just provides a theme frame and all depends on your markdown posts’ styles.</p><p>This is the index page which organized with the posts you write in markdown files.</p><h1 id="News"><a href="#News" class="headerlink" title="News"></a>News</h1><ul><li>2020-04-23: ver 1.2.0 publish, support pjax.</li><li>2020 February, Join in Test University.</li><li>A new theme for academic page is published.</li></ul><h1 id="Publications"><a href="#Publications" class="headerlink" title="Publications"></a>Publications</h1><ol><li>Einstein, Albert, Boris Podolsky, and Nathan Rosen. “Can quantum-mechanical description of physical reality be considered complete?.” Physical review 47.10 (1935): 777.</li><li>Einstein, Albert, Boris Podolsky, and Nathan Rosen. “Can quantum-mechanical description of physical reality be considered complete?.” Physical review 47.10 (1935): 777.</li></ol><p>Add more informations in your posts…</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This is a light &amp; simple &amp; responsive theme for academic websites on Hexo, crafted from <a href="https://github.com/academicpages/academicpages.github.io">academicpages</a> on Jekyll. Thanks a lot.</p><p>The theme adopts only <code>post</code> and <code>page</code> in Hexo to show your informations. For an academic page, it’s important to be simple and obvious.</p><p>Example page: <a href="https://phosphorw.github.io/">phosphorw.github.io</a></p><p><img src="https://raw.githubusercontent.com/PhosphorW/phower-img-folder/master/hexo-theme-academia_mockup.jpg" alt="mockup"></p><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Some skills you need:</p><ul><li>Publish a Hexo blog: <a href="https://hexo.io/">Learn more</a></li><li>Git</li><li>Markdown: <a href="https://www.appinn.com/markdown/#list">Learn more</a></li><li>Deploy a server (Optional)</li><li>Balabala…</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>The simplest way to install is to clone the entire repository:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/PhosphorW/hexo-theme-academia.git themes/Academia</span><br></pre></td></tr></table></figure><p>Some required renderers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>Set theme in hexo work folder’s <code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: Academia</span><br></pre></td></tr></table></figure><h2 id="Create-your-academic-page"><a href="#Create-your-academic-page" class="headerlink" title="Create your academic page"></a>Create your academic page</h2><p>Only <code>post</code> and <code>page</code> are supported in this theme.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n post &quot;any title&quot;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n page &quot;any title&quot;</span><br></pre></td></tr></table></figure><p><strong>Important:</strong> </br><br>Add <code>academia: true</code> in front_matter filed in <code>post .md</code>.</p><img src="https://raw.githubusercontent.com/PhosphorW/phower-img-folder/master/hexo-theme-academia_front-matter.png" width="660px" alt="front_matter"><p>Only post with <code>academia: true</code> front_matter will be shown on home (index) page. You can write your informations in either one post or some posts with this method. The front_matter doesn’t works in <code>page</code>. The <code>pages</code> are standalone with its markdown content.</p><h2 id="Theme-Configurtion"><a href="#Theme-Configurtion" class="headerlink" title="Theme Configurtion"></a>Theme Configurtion</h2><p>All of below options can be config in theme folder <code>_config.yml</code></p><ul><li>Top Menu: in-page anchor, new page links or any links you like</li><li>Side Bar: Support avatar, social links, extra social links (optional), CV_download_link</li><li>Box-shadow mode (optional)</li></ul><p>All icons in page is supported with <a href="https://fontawesome.com/">font-awesome-5</a> (<del>font-awesome-4</del>)</p><blockquote><p>fontawesome-4 is not used since v1.2.1. If you want to update manually, first change CDN stylesheet to fa5. Then change your previous icon class <code>fa</code> to <code>fas</code> or <code>fas</code>.</p></blockquote><p>If you need rss feed, use hexo plugin: <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a></p><p><img src="https://raw.githubusercontent.com/PhosphorW/phower-img-folder/master/hexo-theme-academia_layout.png" alt="theme-layout"></p><h3 id="Update-Theme"><a href="#Update-Theme" class="headerlink" title="Update Theme"></a>Update Theme</h3><p>This theme supports <code>data files</code> smooth update. Copy <code>_config.yml</code> in theme folder to site folder <code>/source/_data/theme.yml</code>, if there is no <code>_data</code> folder, create it.</p><p>Then you can modify your theme configuration in the mentioned <code>theme.yml</code>. If there is any update, just pull the new branch and your configurations won’t be merged. </p><p><strong>Note:</strong></p><ol><li>When use <code>data files</code> to config theme, you must restart hexo server after any modifictions. <code>hexo server</code> again.</li><li>Sometimes there will be changes in theme <code>_config.yml</code>, please refer to <a href="https://github.com/PhosphorW/hexo-theme-academia/releases">release page</a> for more details before update.</li></ol><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><p>中文文档：<a href="https://phower.me/2020/03/Hexo-theme-academia-%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/">Hexo-Theme-Academia 说明文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是个学术简历示例，内容源文件：&lt;code&gt;source/_posts/academia-example.md&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果本页排序在站内靠后，该页内容不会在 &lt;code&gt;A</summary>
      
    
    
    
    
    <category term="Example" scheme="https://junxiansen.cn/tags/Example/"/>
    
  </entry>
  
</feed>
